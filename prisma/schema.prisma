// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Lang {
  br
}

enum AccountRole {
  PROFESSOR
  STUDENT
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String
  lastName      String
  email         String      @unique
  tel           String?
  birth         String?
  cep           String?
  city          String?
  state         String?
  address       String?
  addressNumber String?
  district      String?
  complement    String?
  password      String
  themes        String[]
  aboutMe       String?
  accountType   AccountRole
  isCompleted   Boolean     @default(false)
  isConfirmed   Boolean     @default(false)
  profilePhoto  String?

  subjectIds String[]  @db.ObjectId
  subjects   Subject[] @relation(fields: [subjectIds], references: [id])

  requestIds String[]  @db.ObjectId
  requests   Request[] @relation(fields: [requestIds], references: [id])

  conversationIds String[]       @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[]  @db.ObjectId
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  planId String? @db.ObjectId
  plan   Plan?   @relation(fields: [planId], references: [id])

  messages Message[]
  offers   Offer[]
}

model Request {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  subject         String
  description     String
  isConcluded     Boolean @default(false)
  isOfferAccepted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userIds      String[]       @db.ObjectId
  users        User[]         @relation(fields: [userIds], references: [id])
  Conversation Conversation[]
  offers       Offer[]
}

model Offer {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  lessonDate  DateTime
  lessonPrice Float
  details     String?
  offerLink   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  requestId String  @db.ObjectId
  request   Request @relation(fields: [requestId], references: [id])
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())

  messagesIds String[]  @db.ObjectId
  messages    Message[]

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])

  requestId String  @db.ObjectId
  request   Request @relation(fields: [requestId], references: [id])
}

model Plan {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  planName     String
  cost         Int
  stripePlanId String

  users User[]
}

model Subject {
  id   String   @id @default(auto()) @map("_id") @db.ObjectId
  main String
  lang Lang
  subs String[]

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])
}

model Message {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  imageUrl  String?
  videoUrl  String?
  isDeleted Boolean @default(false)

  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
